package{	import fl.transitions.Tween;	import fl.transitions.easing.Regular;		import flash.display.DisplayObject;	import flash.display.MovieClip;		public class Camera extends MovieClip	{		//properties go here		protected var tiltAndZoomClip:MovieClip = new MovieClip();		protected var panClip:MovieClip = new MovieClip();		protected var offsetClip:MovieClip = new MovieClip();		protected var currentXPan:Number = 0;		protected var currentYPan:Number = 0;		protected var currentTilt:Number = 0;		protected var currentZoomFactor:Number = 1;		protected var isCameraSetUp:Boolean = false;		//constructor		public function Camera()		{			super();			offsetClip.addChild(panClip);			tiltAndZoomClip.addChild(offsetClip);			this.addChild(tiltAndZoomClip);			isCameraSetUp = true;			addEventListener(CameraEvent.DEFAULT, cameraEventHandler);//			trace(hasEventListener(CameraEvent.DEFAULT));		}		//behaviors go here		override public function addChild(child:DisplayObject):DisplayObject		{			if(!isCameraSetUp)			{				this.addChildAt(child, 0);			}			else			{				panClip.addChild(child);			}			return this;		}		//override .x and .y properties - such that is camera x and y change, pan changes equally in opposite directions//		public function addChildToPan(child:DisplayObject):DisplayObject //why can't we just override addChild?//		{//			panClip.addChild(child);//			return this;//		}		public function zoom(zoomFactorIn:Number=1):void //zoom is always from zero - need to change this		{			//zoom this movieclip in				//tween from current zoom to target zoom factor			var zoomXTween = new Tween(tiltAndZoomClip,"scaleX",Regular.easeInOut,currentZoomFactor,zoomFactorIn,.25,true);			var zoomYTween = new Tween(tiltAndZoomClip,"scaleY",Regular.easeInOut,currentZoomFactor,zoomFactorIn,.25,true);			currentZoomFactor = zoomFactorIn;		}		public function tilt(degreesIn:Number=0):void //tilt is always from zero - need to change this		{			//tilt by degrees in				//tween from current rotation to target rotation			var tiltTween = new Tween(tiltAndZoomClip,"rotation",Regular.easeInOut,currentTilt,degreesIn,.25,true);			currentTilt = degreesIn;		}		public function pan(xToPan:Number=0, yToPan:Number=0):void //pan is always from zero - but this doesn't really matter		{			//pan by a certain number				//tween from current pan to target pan			var panXTween = new Tween(panClip,"x",Regular.easeInOut,currentXPan,(currentXPan-xToPan),.25,true);			var panYTween = new Tween(panClip,"y",Regular.easeInOut,currentYPan,(currentYPan-yToPan),.25,true);			currentXPan -= xToPan;			currentYPan -= yToPan;		}		protected function cameraEventHandler(eventIn:CameraEvent):void		{//			trace("I just recieved "+eventIn.toString()+"!");			pan(eventIn.getXPan(),eventIn.getYPan());			tilt(eventIn.getTilt());			zoom(eventIn.getZoomFactor());			}		public function offset(xToOffset:Number, yToOffset:Number):void		{			this.x = xToOffset;			this.y = yToOffset;			offsetClip.x = -1*xToOffset;			offsetClip.y = -1*yToOffset;		}	}}